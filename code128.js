// Generated by CoffeeScript 1.8.0
(function() {
  var Code128C, _128Cweights;

  _128Cweights = ['212222', '222122', '2222221', '121223', '121322', '131222', '122213', '122312', '132212', '221213', '221312', '231212', '112232', '122132', '122231', '113222', '123122', '123221', '223211', '221132', '221231', '213212', '223112', '312131', '311222', '321122', '321221', '312212', '322112', '322211', '212123', '212321', '232121', '111323', '131123', '131321', '112313', '132113', '132311', '211313', '231113', '231311', '112133', '112331', '132131', '113123', '113321', '133121', '313121', '211331', '231131', '213113', '213311', '213131', '311123', '311321', '331121', '312113', '312311', '332111', '314111', '221411', '431111', '111224', '111422', '121124', '121421', '141122', '141221', '112214', '112412', '122114', '122411', '142112', '142211', '241211', '221114', '413111', '241112', '134111', '111242', '121142', '121241', '114212', '124112', '124211', '411212', '421112', '421211', '212141', '214121', '412121', '111143', '111341', '131141', '114113', '114311', '411113', '411311', '113141', '114131', '311141', '411131', '211412', '211214', '211232', '2331112', '211133'];

  Code128C = (function() {
    function Code128C(digitStr) {
      this.digitStr = digitStr;
      this.bits = '';
      this.weights = '';
      this.encode();
    }

    Code128C.prototype.toBitString = function(digits) {
      var b, bit, bits, i, _i, _j, _ref, _ref1;
      bits = '';
      for (i = _i = 0, _ref = digits.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i % 2 === 0) {
          bit = '1';
        } else {
          bit = '0';
        }
        for (b = _j = 0, _ref1 = (digits[i] * 1) - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; b = 0 <= _ref1 ? ++_j : --_j) {
          bits += bit;
        }
      }
      return bits;
    };

    Code128C.prototype.start = function() {
      this.checkSum += 105;
      return _128Cweights[105];
    };

    Code128C.prototype.code = function() {
      var codeForDigit, i, ret, _i, _ref;
      ret = '';
      for (i = _i = 0, _ref = this.digitStr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        codeForDigit = this.digitStr[i] * 1 + 16;
        ret += _128Cweights[codeForDigit];
        this.checkSum += codeForDigit * (i + 1);
      }
      return ret;
    };

    Code128C.prototype.check = function() {
      this.checkVal = this.checkSum % 103;
      return _128Cweights[this.checkVal];
    };

    Code128C.prototype.end = function() {
      return _128Cweights[106];
    };

    Code128C.prototype.encode = function() {
      this.checkSum = 0;
      this.weights = this.start() + this.code() + this.check() + this.end();
      return this.bits = this.bitString();
    };

    Code128C.prototype.bitString = function() {
      return this.toBitString(this.weights);
    };

    Code128C.prototype.trueFalse = function() {
      var arr, i, _i, _ref;
      this.encode();
      arr = [];
      for (i = _i = 0, _ref = this.bits.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        console.log(this.bits[i]);
        if (this.bits[i] === '0') {
          arr.push(false);
        } else {
          arr.push(true);
        }
      }
      return arr;
    };

    return Code128C;

  })();

}).call(this);
