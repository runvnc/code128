// Generated by CoffeeScript 1.8.0
(function() {
  var Code128Overlay, blockDisplayTimeMS, blockHeight, blockWidth, maxBlocksAtOnce,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  blockWidth = 32;

  blockHeight = 32;

  maxBlocksAtOnce = 4;

  blockDisplayTimeMS = 300;

  Code128Overlay = (function() {
    function Code128Overlay(options) {
      this.stop = __bind(this.stop, this);
      this.update = __bind(this.update, this);
      this.drawBlock = __bind(this.drawBlock, this);
      this.divid = options.targetDiv;
      this.value = options.value;
      this.calcCode();
      this.init();
      this.run();
    }

    Code128Overlay.prototype.calcCode = function() {
      var barcode;
      barcode = new Code128C(this.value);
      debug(barcode.bitString());
      return this.blocks = barcode.trueFalse();
    };

    Code128Overlay.prototype.init = function() {
      var size;
      this.startBlock = 0;
      this.canvas = document.createElement('canvas');
      this.div = document.getElementById(this.divid);
      this.canvas.id = "Code128Overlay";
      size = blockWidth * maxBlocksAtOnce;
      this.canvas.width = size;
      this.canvas.height = blockWidth;
      this.canvas.style.zIndex = 8;
      this.canvas.style.position = "absolute";
      this.canvas.style.border = "1px solid green";
      return this.div.appendChild(this.canvas);
    };

    Code128Overlay.prototype.drawBlock = function(isOn, pos) {
      var color, ctx;
      ctx = this.canvas.getContext('2d');
      if (isOn) {
        color = 'black';
      } else {
        color = 'white';
      }
      ctx.fillStyle = color;
      return ctx.fillRect(pos * blockWidth, 0, (pos + 1) * blockWidth, blockHeight);
    };

    Code128Overlay.prototype.update = function() {
      var ctx, i, index, _i;
      ctx = this.canvas.getContext('2d');
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      for (i = _i = 0; 0 <= maxBlocksAtOnce ? _i <= maxBlocksAtOnce : _i >= maxBlocksAtOnce; i = 0 <= maxBlocksAtOnce ? ++_i : --_i) {
        index = this.startBlock + i;
        if (index < this.blocks.length) {
          this.drawBlock(this.blocks[index], i);
        }
      }
      this.startBlock += maxBlocksAtOnce;
      if (this.startBlock >= this.blocks.length) {
        return this.startBlock = 0;
      }
    };

    Code128Overlay.prototype.run = function() {
      return this.int = setInterval(this.update, blockDisplayTimeMS);
    };

    Code128Overlay.prototype.stop = function() {
      return clearInterval(this.int);
    };

    return Code128Overlay;

  })();

  window.Code128Overlay = Code128Overlay;

}).call(this);
